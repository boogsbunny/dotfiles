;; -*- mode: common-lisp; -*-

;; Some OSes package Lisp compilers in a way that ASDF is not automatically loaded.
(require "asdf")

(defun load-sbcl-contribs ()
  (dolist (contrib '(:sb-cltl2
                     :sb-posix
                     :sb-bsd-sockets
                     :sb-rotate-byte
                     :sb-introspect
                     :sb-concurrency))
    (require contrib)))

(load-sbcl-contribs)

(let ((guix-profile (format nil "~a/.guix-profile/lib/" (uiop:getenv "HOME"))))
  (when (and (probe-file guix-profile)
             (ignore-errors (asdf:load-system "cffi")))
    (push guix-profile
          (symbol-value (find-symbol (string '*foreign-library-directories*)
                                     (find-package 'cffi))))))

(uiop:define-package #:guix
  (:use :common-lisp))
(in-package #:guix)

(export '*guix-profiles-dir*)
(defvar *guix-profiles-dir* "~/.guix-extra-profiles/"
  "Directory in which Guix profiles are stored.
The actual profiles are in the subsubdirectories.")

(export '*cffi-dirs*)
(defvar *cffi-dirs* '("~/.guix-profile/lib")
  "Shared library directories to be used for CFFI.")

(defun find-guix-library-dirs (profiles-dir)
  (mapcar (lambda (d)
            (format nil "~a~a/lib/"
                    (namestring d)
                    (first (last (pathname-directory d)))))
          (uiop:subdirectories profiles-dir)))

(export 'set-cffi-library-dirs)
(defun set-cffi-library-dirs (&optional (dirs (append
                                               *cffi-dirs*
                                               (find-guix-library-dirs *guix-profiles-dir*))))
  "Call this to set `cffi:*foreign-library-directories*' to DIRS."
  (when (ignore-errors (asdf:load-system "cffi"))
    (let ((sym (read-from-string "cffi:*foreign-library-directories*")))
      (setf (symbol-value sym)
            (union (symbol-value sym)
                   ;; CFFI needs a trailing "/".
                   (delete nil (mapcar #'uiop:ensure-directory-pathname dirs))
                   :test #'uiop:pathname-equal)))))

;; Set it by default.
(set-cffi-library-dirs)

(in-package :cl-user)

(defun mark-guix-packages-as-immutable ()
  (asdf:map-systems
   (lambda (system)
     (when (and (asdf:system-source-file system)
                (= (length #1="/gnu/store")
                   (mismatch #1#
                             (namestring (asdf:system-source-file system)))))
       (format *debug-io* "~&System ~a is located in guix's store.~%" system)
       (asdf:register-immutable-system system)))))

(pushnew 'mark-guix-packages-as-immutable asdf/driver:*clear-configuration-hook*)

;; Uncomment the following to increase the debug details.
;; It's often better to do this from the REPL.
;; (declaim (optimize (speed 0) (space 0) (debug 3)))

;; Uncomment to enable full type checks (should be the default).
;; (declaim (optimize (or (>= safety 2) (>= safety speed 1))))

#-ocicl
(when (probe-file #P"/home/boogs/.local/share/ocicl/ocicl-runtime.lisp")
  (load #P"/home/boogs/.local/share/ocicl/ocicl-runtime.lisp"))
(asdf:initialize-source-registry
  (list :source-registry (list :directory (uiop:getcwd)) :inherit-configuration))
